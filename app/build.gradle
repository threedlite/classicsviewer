plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.classicsviewer.app'
    compileSdk 36
    
    // Asset packs removed - including database directly in APK
    
    // Load keystore properties if available
    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }
    
    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    defaultConfig {
        applicationId "com.classicsviewer.app"
        minSdk 21
        targetSdk 36
        versionCode 8
        versionName "0.8.8"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Add build timestamp
        buildConfigField "String", "BUILD_TIME", "\"${new Date().format('yyyy-MM-dd HH:mm:ss')}\""
        
        // Only include English and Greek languages
        resourceConfigurations += ["en", "el"]
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "USE_MOCK_DATA", "false"
            applicationIdSuffix ".debug"
        }
        release {
            buildConfigField "boolean", "USE_MOCK_DATA", "false"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    
    // Include database files in APK
    packagingOptions {
        // Database files are now included directly
    }
    
    // Don't compress database files
    aaptOptions {
        noCompress 'db', 'zip'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-ktx:1.8.0'
    
    // RecyclerView for lists
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    
    // Room database
    implementation 'androidx.room:room-runtime:2.6.1'
    implementation 'androidx.room:room-ktx:2.6.1'
    kapt 'androidx.room:room-compiler:2.6.1'
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    
    // XML parsing
    implementation 'com.fasterxml.woodstox:woodstox-core:6.5.1'
    
    // Play Asset Delivery
    implementation 'com.google.android.play:asset-delivery:2.2.2'
    implementation 'com.google.android.play:asset-delivery-ktx:2.2.2'
    
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Task to ensure database exists in debug assets before building
task checkDatabaseExists {
    doLast {
        def dbFile = file("$projectDir/src/debug/assets/perseus_texts.db.zip")
        if (!dbFile.exists()) {
            throw new GradleException("""
                ERROR: Database file not found at: ${dbFile.absolutePath}
                
                The database must be built before compiling the app.
                Please run one of the deployment scripts first:
                  - ./deploy_complete.sh (builds sample database)
                  - ./deploy_full_database.sh (builds full database)
                
                Or manually create the database:
                  1. cd data-prep
                  2. python3 create_perseus_database.py sample
                  3. zip -9 ../app/src/debug/assets/perseus_texts.db.zip perseus_texts_sample.db
            """)
        }
        println "✓ Database found at: ${dbFile.absolutePath} (${dbFile.length() / 1024 / 1024}MB)"
    }
}

// Make sure database check runs before building
preBuild.dependsOn checkDatabaseExists

// Task to check AAB size after building
task checkAabSize {
    doLast {
        def aabFile = file("$buildDir/outputs/bundle/release/app-release.aab")
        if (aabFile.exists()) {
            def sizeInMB = aabFile.length() / 1024 / 1024
            println "AAB size: ${sizeInMB}MB"
            
            if (sizeInMB > 200) {
                throw new GradleException("""
                    ERROR: Release AAB exceeds Google Play's 200MB limit!
                    
                    Current AAB size: ${sizeInMB}MB
                    Maximum allowed: 200MB
                    
                    The database is too large for the base module.
                    Consider:
                    1. Reducing the number of authors in SAMPLE_AUTHORS.md
                    2. Using Play Asset Delivery (requires perseus_database module)
                    3. Implementing dynamic feature modules
                """)
            } else {
                println "✓ AAB size is within Google Play limits (${sizeInMB}MB < 200MB)"
            }
        }
    }
}

// Run size check after bundle task
afterEvaluate {
    tasks.bundleRelease.finalizedBy checkAabSize
}